(function() {
  var ck, errors, failed, passed, print, puts, render, test, tests, _ref;
  this.run = function() {
    test('Literal text', function() {
      return 'Just text' === render(function() {
        return text('Just text');
      });
    });
    test('Default DOCTYPE', function() {
      return '<!DOCTYPE html>' === render(function() {
        return doctype();
      });
    });
    test('DOCTYPE', function() {
      return '<?xml version="1.0" encoding="utf-8" ?>' === render(function() {
        return doctype('xml');
      });
    });
    test('Custom tag', function() {
      return '<custom></custom>' === render(function() {
        return tag('custom');
      });
    });
    test('Custom tag with attributes', function() {
      return '<custom foo="bar" ping="pong"></custom>' === render(function() {
        return tag('custom', {
          foo: 'bar',
          ping: 'pong'
        });
      });
    });
    test('Custom tag with attributes and inner content', function() {
      return '<custom foo="bar" ping="pong">zag</custom>' === render(function() {
        return tag('custom', {
          foo: 'bar',
          ping: 'pong'
        }, function() {
          return 'zag';
        });
      });
    });
    test('Self-closing tags', function() {
      return '<br />' === render(function() {
        return br();
      }) && '<img src="icon.png" alt="Icon" />' === render(function() {
        return img({
          src: 'icon.png',
          alt: 'Icon'
        });
      });
    });
    test('Common tag', function() {
      return '<p>hi</p>' === render(function() {
        return p('hi');
      });
    });
    test('Attributes', function() {
      return '<a href="/" title="Home"></a>' === render(function() {
        return a({
          href: '/',
          title: 'Home'
        });
      });
    });
    test('HereDocs', function() {
      return "<script>$(document).ready(function(){\n  alert('test');\n});</script>" === render(function() {
        return script("$(document).ready(function(){\n  alert('test');\n});");
      });
    });
    test('CoffeeScript', function() {
      return "<script>;(function () {\n          return $(document).ready(function() {\n            return alert('hi!');\n          });\n        })();</script>" === render(function() {
        return coffeescript(function() {
          return $(document).ready(function() {
            return alert('hi!');
          });
        });
      });
    });
    test('Context vars', function() {
      return '<h1>bar</h1>' === render((function() {
        return h1(this.foo);
      }), {
        context: {
          foo: 'bar'
        }
      });
    });
    test('Local vars, hard-coded', function() {
      var obj;
      obj = {
        foo: 'bar'
      };
      render((function() {
        return h1(obj.foo);
      }), {
        locals: {
          obj: obj
        }
      });
      obj.foo = 'baz';
      return '<h1>bar</h1>' === render((function() {
        return h1(obj.foo);
      }), {
        locals: {
          obj: obj
        }
      });
    });
    test('Local vars, hard-coded (functions)', function() {
      return '<h1>The sum is: 3</h1>' === render(function() {
        return h1("The sum is: " + (sum(1, 2)));
      }, {
        locals: {
          sum: function(a, b) {
            return a + b;
          }
        }
      });
    });
    test('Local vars, hard-coded ("helpers")', function() {
      var textbox;
      textbox = function(attrs) {
        attrs.name = attrs.id;
        attrs.type = 'text';
        return tag('input', attrs);
      };
      return '<input id="foo" name="foo" type="text" />' === render((function() {
        return textbox({
          id: 'foo'
        });
      }), {
        locals: {
          textbox: textbox
        }
      });
    });
    test('Local vars, dynamic', function() {
      var obj;
      obj = {
        ping: 'pong'
      };
      render((function() {
        return h1(obj.ping);
      }), {
        locals: {
          obj: obj
        },
        dynamic_locals: true
      });
      obj.ping = 'pang';
      return '<h1>pang</h1>' === render((function() {
        return h1(obj.ping);
      }), {
        locals: {
          obj: obj
        },
        dynamic_locals: true
      });
    });
    test('Comments', function() {
      return '<!--Comment-->' === render(function() {
        return comment('Comment');
      });
    });
    test('Escaping', function() {
      return "<h1>&lt;script&gt;alert('&quot;pwned&quot; by c&amp;a &amp;copy;')&lt;/script&gt;</h1>" === render(function() {
        return h1(h("<script>alert('\"pwned\" by c&a &copy;')</script>"));
      });
    });
    test('Autoescaping', function() {
      return "<h1>&lt;script&gt;alert('&quot;pwned&quot; by c&amp;a &amp;copy;')&lt;/script&gt;</h1>" === render(function() {
        return h1("<script>alert('\"pwned\" by c&a &copy;')</script>");
      }, {
        autoescape: true
      });
    });
    return puts("\nTests: " + tests.length + " | Passed: " + passed.length + " | Failed: " + failed.length + " | Errors: " + errors.length);
  };
  puts = console.log;
  print = require('sys').print;
  ck = require('./lib/coffeekup');
  render = ck.render;
  _ref = [[], [], [], []], tests = _ref[0], passed = _ref[1], failed = _ref[2], errors = _ref[3];
  test = function(name, code) {
    tests.push(name);
    print("Testing \"" + name + "\"... ");
    try {
      if (code()) {
        passed.push(name);
        return puts("[OK]");
      } else {
        failed.push(name);
        return puts("[Failed]");
      }
    } catch (ex) {
      errors.push(name);
      return puts("[Error] \"" + ex.message + "\"");
    }
  };
}).call(this);
