(function() {
  var benchmark, coffeekup, coffeekup_compiled_template, coffeekup_string_template, coffeekup_template, data, eco, eco_template, ejs, ejs_template, haml, haml_template, haml_template_compiled, jade, jade_template, puts;
  coffeekup = require('./lib/coffeekup');
  jade = require('jade');
  ejs = require('ejs');
  eco = require('eco');
  haml = require('haml');
  puts = console.log;
  data = {
    title: 'test',
    inspired: false,
    users: [
      {
        email: 'house@gmail.com',
        name: 'house'
      }, {
        email: 'cuddy@gmail.com',
        name: 'cuddy'
      }, {
        email: 'wilson@gmail.com',
        name: 'wilson'
      }
    ]
  };
  coffeekup_template = function() {
    doctype(5);
    return html({
      lang: 'en'
    }, function() {
      head(function() {
        meta({
          charset: 'utf-8'
        });
        title(this.title);
        return style('body {font-family: "sans-serif"}\nsection, header {display: block}');
      });
      return body(function() {
        return section(function() {
          header(function() {
            return h1(this.title);
          });
          if (this.inspired) {
            p('Create a witty example');
          } else {
            p('Go meta');
          }
          return ul(function() {
            var user, _i, _len, _ref, _results;
            _ref = this.users;
            _results = [];
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              user = _ref[_i];
              li(user.name);
              _results.push(li(function() {
                return a({
                  href: "mailto:" + user.email
                }, function() {
                  return user.email;
                });
              }));
            }
            return _results;
          });
        });
      });
    });
  };
  coffeekup_string_template = "doctype 5\nhtml lang: 'en', ->\n  head ->\n    meta charset: 'utf-8'\n    title @title\n    style '''\n      body {font-family: \"sans-serif\"}\n      section, header {display: block}\n    '''\n  body ->\n    section ->\n      header ->\n        h1 @title\n      if @inspired\n        p 'Create a witty example'\n      else\n        p 'Go meta'\n      ul ->\n        for user in @users\n          li user.name\n          li -> a href: \"mailto:\#{user.email}\", -> user.email";
  coffeekup_compiled_template = coffeekup.compile(coffeekup_template);
  jade_template = '!!! 5\nhtml(lang="en")\n  head\n    meta(charset="utf-8")\n    title= title\n    style\n      | body {font-family: "sans-serif"}\n      | section, header {display: block}\n  body\n    section\n      header\n        h1= title\n      - if (inspired)\n        p Create a witty example\n      - else\n        p Go meta\n      ul\n        - each user in users\n          li= user.name\n          li\n            a(href="mailto:"+user.email)= user.email';
  ejs_template = '<!DOCTYPE html>\n<html lang="en">\n  <head>\n    <meta charset="utf-8">\n    <title><%= title %></title>\n    <style>\n      body {font-family: "sans-serif"}\n      section, header {display: block}\n    </style>\n  </head>\n  <body>\n    <section>\n      <header>\n        <h1><%= title %></h1>\n      </header>\n      <% if (inspired) { %>\n        <p>Create a witty example</p>\n      <% } else { %>\n        <p>Go meta</p>\n      <% } %>\n      <ul>\n        <% for (user in users) { %>\n          <li><%= user.name %></li>\n          <li><a href="mailto:<%= user.email %>"><%= user.email %></a></li>\n        <% } %>\n      </ul>\n    </section>\n  </body>\n</html>';
  eco_template = '<!DOCTYPE html>\n<html lang="en">\n  <head>\n    <meta charset="utf-8">\n    <title><%= @title %></title>\n    <style>\n      body {font-family: "sans-serif"}\n      section, header {display: block}\n    </style>\n  </head>\n  <body>\n    <section>\n      <header>\n        <h1><%= @title %></h1>\n      </header>\n      <% if @inspired: %>\n        <p>Create a witty example</p>\n      <% else: %>\n        <p>Go meta</p>\n      <% end %>\n      <ul>\n        <% for user in @users: %>\n          <li><%= user.name %></li>\n          <li><a href="mailto:<%= user.email %>"><%= user.email %></a></li>\n        <% end %>\n      </ul>\n    </section>\n  </body>\n</html>';
  haml_template = '!!! 5\n%html{lang: "en"}\n  %head\n    %meta{charset: "utf-8"}\n    %title= title\n    :css\n      body {font-family: "sans-serif"}\n      section, header {display: block}\n  %body\n    %section\n      %header\n        %h1= title\n      :if inspired\n        %p Create a witty example\n      :if !inspired\n        %p Go meta\n      %ul\n        :each user in users\n          %li= user.name\n          %li\n            %a{href: "mailto:#{user.email}"}= user.email';
  haml_template_compiled = haml(haml_template);
  benchmark = function(title, code) {
    var i, start;
    start = new Date;
    for (i = 1; i <= 5000; i++) {
      code();
    }
    return puts("" + title + ": " + (new Date - start) + " ms");
  };
  this.run = function() {
    benchmark('CoffeeKup (precompiled)', function() {
      return coffeekup_compiled_template({
        context: data
      });
    });
    benchmark('CoffeeKup (code)', function() {
      return coffeekup.render(coffeekup_template, {
        context: data
      });
    });
    benchmark('CoffeeKup (code, cache off)', function() {
      return coffeekup.render(coffeekup_template, {
        context: data,
        cache: false
      });
    });
    benchmark('CoffeeKup (string)', function() {
      return coffeekup.render(coffeekup_string_template, {
        context: data
      });
    });
    benchmark('CoffeeKup (string, cache off)', function() {
      return coffeekup.render(coffeekup_string_template, {
        context: data,
        cache: false
      });
    });
    benchmark('Jade (cache off)', function() {
      return jade.render(jade_template, {
        locals: data
      });
    });
    benchmark('Jade (cache on)', function() {
      return jade.render(jade_template, {
        locals: data,
        cache: true,
        filename: 'test'
      });
    });
    benchmark('ejs (cache off)', function() {
      return ejs.render(ejs_template, {
        locals: data
      });
    });
    benchmark('ejs (cache on)', function() {
      return ejs.render(ejs_template, {
        locals: data,
        cache: true,
        filename: 'test'
      });
    });
    benchmark('haml-js', function() {
      return haml.render(haml_template, {
        locals: data
      });
    });
    benchmark('haml-js (precompiled)', function() {
      return haml_template_compiled(data);
    });
    return benchmark('Eco', function() {
      return eco.render(eco_template, data);
    });
  };
}).call(this);
